/* Generated By:JavaCC: Do not edit this line. JavascriptParser.java */
package org.liujing.jj;

import org.liujing.parser.JsNode;
import java.io.*;
import java.util.logging.*;
import sidekick.*;
import javax.swing.tree.*;
import java.util.regex.*;
import errorlist.*;

public class JavascriptParser implements JavascriptParserConstants {
        public static Logger log = Logger.getLogger(JavascriptParser.class.getName());
        private SideKickParsedData data;
        private org.gjt.sp.jedit.Buffer buffer;
        private DefaultMutableTreeNode parentNode;
        private static Pattern lineNoP = Pattern.compile("line ([0-9]*)");
        private static Pattern columnP = Pattern.compile("column ([0-9]*)");
   public JavascriptParser()
   {
          //super("myJs");
      this(System.in);
      jj_input_stream.setTabSize(1);
   }
   public void parse(Reader is)throws Exception{
          try {
                ReInit(is);

      start();
      }catch(Exception e) {
        //log.log(Level.WARNING,"",e);
        throw e;
      }
   }
   public void parse(InputStream is)throws Exception{
          try {
                ReInit(is);

      start();
      }catch(Exception e) {
        //log.log(Level.WARNING,"",e);
        throw e;
      }
   }
   public void parse(String src)throws Exception{
          parse(new StringReader(src));
   }


   public SideKickParsedData parse(org.gjt.sp.jedit.Buffer buffer, errorlist.DefaultErrorSource errorSource)throws Exception
        {
                data=new SideKickParsedData(buffer.getName());
                try{
                        this.buffer = buffer;
                        parentNode = data.root;
                        parse(buffer.getText(0,buffer.getLength()));
                        //node=new DefaultMutableTreeNode("test");
                        //data.root.add(node);

                }catch(ParseException e){
                        log.log(Level.FINE,"parse failed",e);
                        int line = 0, start = 0, end = 0;
                        Matcher m = lineNoP.matcher(e.getMessage());
                        if(m.find()){
                                line = Integer.parseInt(m.group(1))-1;
                        }
                        m = columnP.matcher(e.getMessage());
                        if(m.find()){
                                start = Integer.parseInt(m.group(1));
                                end = start + 1;
                        }
                        errorSource.addError(ErrorSource.ERROR, buffer.getPath(),line, start, end, e.getMessage());
                }catch(TokenMgrError te){
                        errorSource.addError(ErrorSource.ERROR, buffer.getPath(),0,0,0, te.getMessage());
                }
                return data;
        }

  final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case BREAK:
      case CONST:
      case CONTINUE:
      case DO:
      case FALSE:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case TYPEOF:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        ;
        break;
      default:
        break label_1;
      }
      BlockStatement();
    }
    jj_consume_token(0);
  }

  final public void VariableDeclarator() throws ParseException {
        String idTk = null;
        DefaultMutableTreeNode node = null;
    idTk = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      node = VariableInitializer();
                if(node!=null){
                        Object o = node.getUserObject();
                        if(o instanceof JsNode){
                                JsNode jsnode = (JsNode)o;
                                jsnode.setName(idTk);
                        }
                }
      break;
    default:
      ;
    }
  }

  final public String VariableDeclaratorId() throws ParseException {
        Token id = null;
    id = jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
                                                  {if (true) return id.image;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultMutableTreeNode VariableInitializer() throws ParseException {
        DefaultMutableTreeNode node = null;
    node = Expression();
                           {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public void ArrayInitializer() throws ParseException {
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case VOID:
    case TYPEOF:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
      VariableInitializer();
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        VariableInitializer();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACKET);
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case 13:
    case CONST:
      Type();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void NameList() throws ParseException {
    Name();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_5;
      }
      jj_consume_token(COMMA);
      Name();
    }
  }

/*
 * Expression syntax follows.
 */
  final public DefaultMutableTreeNode Expression() throws ParseException {
        DefaultMutableTreeNode[] nodes = new DefaultMutableTreeNode[1];
    ConditionalExpression(nodes);
    if (jj_2_4(2)) {
      AssignmentOperator();
      Expression();
    } else {
      ;
    }
         {if (true) return nodes[0];}
    throw new Error("Missing return statement in function");
  }

  final public DefaultMutableTreeNode JSONExpression() throws ParseException {
        DefaultMutableTreeNode node = null;
        DefaultMutableTreeNode subnode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
                DefaultMutableTreeNode oldParent = parentNode;
                parentNode = new DefaultMutableTreeNode("{}");
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        subnode = JSONObjectUnit();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_6;
          }
          jj_consume_token(COMMA);
          subnode = JSONObjectUnit();
        }
        break;
      default:
        ;
      }
      jj_consume_token(RBRACE);
                if(parentNode.getChildCount()>0){
                        oldParent.add(parentNode);
                }
                parentNode = oldParent;
                {if (true) return node;}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case VOID:
      case TYPEOF:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        Expression();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_7;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        ;
      }
      jj_consume_token(RBRACKET);
                {if (true) return node;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DefaultMutableTreeNode JSONObjectUnit() throws ParseException {
        Token jsonPName = null;
        DefaultMutableTreeNode node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jsonPName = jj_consume_token(IDENTIFIER);
      break;
    case STRING_LITERAL:
      jsonPName = jj_consume_token(STRING_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jsonPName = jj_consume_token(CHARACTER_LITERAL);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    node = Expression();
                if(node!=null){
                        String newName = jsonPName.image;
                        Object obj = node.getUserObject();
                        if(obj instanceof JsNode){
                                JsNode jsnode = (JsNode)obj;
                                jsnode.setName(newName);
                        }
                }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultMutableTreeNode FunctionExpression() throws ParseException {
        Token functionTk = null;
        Token functionName = null;
        Token end = null;
        DefaultMutableTreeNode oldParent = parentNode;
        DefaultMutableTreeNode subnode = null;
        String name = null;
    functionTk = jj_consume_token(FUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      functionName = jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_8;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
      break;
    default:
      ;
    }
    end = jj_consume_token(RPAREN);
                if(functionName!=null)
                        name = functionName.image;
                else
                        name = "<func>";
                if(buffer == null){
                        subnode = new DefaultMutableTreeNode(name);
                }else{
                        int offset =
                                buffer.getLineStartOffset(Math.max(functionTk.beginLine-1,0))
                                + functionTk.beginColumn-1;
                        int endOff =
                        buffer.getLineStartOffset(Math.max(end.endLine-1,0))
                                + end.endColumn;
                        //log.info("fun "+name+" "+end.beginColumn+" ~ "+end.endColumn);
                        JsNode jnode = new JsNode(name,buffer.getText(offset,endOff-offset));
                        jnode.setStartOffset(offset);
                        jnode.setEndOffset(endOff);
                        //sidekick.util.ElementUtil.createStartPosition(buffer,jnode);
                        //sidekick.util.ElementUtil.createEndPosition(buffer,jnode);
                        subnode = new DefaultMutableTreeNode(jnode);
                        //if(parentNode!=null)
                        //log.info(name+"'s parent = "+parentNode.hashCode());
                        parentNode.add(subnode);
                        parentNode = subnode;
                }
    Block();
                //log.info(name+" block end, child:"+parentNode.getChildCount());
                parentNode = oldParent;
                {if (true) return subnode;}
    throw new Error("Missing return statement in function");
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    ConditionalOrExpression(nodes);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      Expression();
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      ;
    }
  }

  final public void ConditionalOrExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    ConditionalAndExpression(nodes);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_9;
      }
      jj_consume_token(SC_OR);
      ConditionalAndExpression(nodes);
    }
  }

  final public void ConditionalAndExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    InclusiveOrExpression(nodes);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_10;
      }
      jj_consume_token(SC_AND);
      InclusiveOrExpression(nodes);
    }
  }

  final public void InclusiveOrExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    ExclusiveOrExpression(nodes);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_11;
      }
      jj_consume_token(BIT_OR);
      ExclusiveOrExpression(nodes);
    }
  }

  final public void ExclusiveOrExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    AndExpression(nodes);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_12;
      }
      jj_consume_token(XOR);
      AndExpression(nodes);
    }
  }

  final public void AndExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    EqualityExpression(nodes);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_13;
      }
      jj_consume_token(BIT_AND);
      EqualityExpression(nodes);
    }
  }

  final public void EqualityExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    InstanceOfExpression(nodes);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case EQ:
      case NE:
      case 124:
      case 125:
        ;
        break;
      default:
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      case 124:
        jj_consume_token(124);
        break;
      case 14:
        jj_consume_token(14);
        break;
      case 125:
        jj_consume_token(125);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression(nodes);
    }
  }

  final public void InstanceOfExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    RelationalExpression(nodes);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      PrimaryExpression();
      break;
    default:
      ;
    }
  }

  final public void RelationalExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    ShiftExpression(nodes);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression(nodes);
    }
  }

  final public void ShiftExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    AdditiveExpression(nodes);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RUNSIGNEDSHIFT:
      case RSIGNEDSHIFT:
        ;
        break;
      default:
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        RSIGNEDSHIFT();
        break;
      case RUNSIGNEDSHIFT:
        RUNSIGNEDSHIFT();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression(nodes);
    }
  }

  final public void AdditiveExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    MultiplicativeExpression(nodes);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression(nodes);
    }
  }

  final public void MultiplicativeExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    UnaryExpression(nodes);
    label_18:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REM:
        jj_consume_token(REM);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression(nodes);
    }
  }

  final public void UnaryExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression(nodes);
      break;
    case TYPEOF:
      jj_consume_token(TYPEOF);
      UnaryExpression(nodes);
      break;
    case VOID:
      jj_consume_token(VOID);
      UnaryExpression(nodes);
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case SLASH:
      UnaryExpressionNotPlusMinus(nodes);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus(DefaultMutableTreeNode[] nodes) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression(nodes);
      break;
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case SLASH:
      PostfixExpression(nodes);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PostfixExpression(DefaultMutableTreeNode[] nodes) throws ParseException {
 Object o = null;
    o = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
          if(o instanceof DefaultMutableTreeNode)
                  nodes[0] = (DefaultMutableTreeNode)o;
  }

  final public Object PrimaryExpression() throws ParseException {
        DefaultMutableTreeNode node = null;
        Token tk = getToken(1);
        int startOffset = 0;
        if(buffer!=null){
                startOffset = buffer.getLineStartOffset(Math.max(tk.beginLine-1,0))
                        + tk.beginColumn-1;
        }
    node = PrimaryPrefix();
    label_19:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_19;
      }
      PrimarySuffix();
    }
                tk = getToken(0);
                if(node!=null){
                        {if (true) return node;}
                }

                if(buffer!=null){
                        int endOffset = buffer.getLineStartOffset(Math.max(tk.endLine-1,0))+tk.endColumn;
                        {if (true) return buffer.getText(startOffset,endOffset-startOffset);}
                }else{
                        {if (true) return "";}
                }
    throw new Error("Missing return statement in function");
  }

  final public void MemberSelector() throws ParseException {
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
  }

  final public DefaultMutableTreeNode PrimaryPrefix() throws ParseException {
        DefaultMutableTreeNode node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LBRACE:
    case LBRACKET:
    case SLASH:
      node = Literal();
                         {if (true) return node;}
      break;
    default:
      if (jj_2_7(2147483647)) {
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            break label_20;
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(DOT);
        }
        jj_consume_token(THIS);
   {if (true) return node;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
   {if (true) return node;}
          break;
        case NEW:
          AllocationExpression();
   {if (true) return node;}
          break;
        case IDENTIFIER:
          Name();
   {if (true) return node;}
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void PrimarySuffix() throws ParseException {
    if (jj_2_8(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
    } else if (jj_2_9(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_10(2)) {
      jj_consume_token(DOT);
      AllocationExpression();
    } else if (jj_2_11(3)) {
      MemberSelector();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        Arguments();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public DefaultMutableTreeNode Literal() throws ParseException {
        DefaultMutableTreeNode node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
                    {if (true) return node;}
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
                           {if (true) return node;}
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
                      {if (true) return node;}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                   {if (true) return node;}
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
                   {if (true) return node;}
      break;
    case NULL:
      NullLiteral();
                 {if (true) return node;}
      break;
    case LBRACE:
    case LBRACKET:
      node = JSONExpression();
                               {if (true) return node;}
      break;
    case FUNCTION:
      node = FunctionExpression();
                                  {if (true) return node;}
      break;
    case SLASH:
      RegExp();
            {if (true) return node;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// "/" [  <REGEXP_PARAM:(["g","i","m"])+> ]
  final public void RegExp() throws ParseException {
        token_source.SwitchTo(IN_REGEXP);
    jj_consume_token(SLASH);
    jj_consume_token(REGEXP);
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case VOID:
    case TYPEOF:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
      ArgumentList();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_21;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void AllocationExpression() throws ParseException {
    jj_consume_token(NEW);
    PrimaryExpression();
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
        DefaultMutableTreeNode node = null;
    if (jj_2_12(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case INCR:
      case DECR:
      case SLASH:
        StatementExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
        break;
      case VOID:
      case TYPEOF:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LabeledStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Statement();
  }

  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case BREAK:
      case CONST:
      case CONTINUE:
      case DO:
      case FALSE:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case TYPEOF:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        ;
        break;
      default:
        break label_22;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_13(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DO:
      case FALSE:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case TYPEOF:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        Statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    Type();
    VariableDeclarator();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
        DefaultMutableTreeNode node = null;
        String name = null;
        Object prim = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case SLASH:
      prim = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperator();
          node = Expression();
        if(node!=null && prim instanceof String){
                name = (String)prim;
                Object o = node.getUserObject();
                if(o instanceof JsNode){
                        JsNode jsnode = (JsNode)o;
                        jsnode.setName(name);
                }else{
                        node.setUserObject(name);
                }
        }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_24;
      }
      SwitchLabel();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
        case BREAK:
        case CONST:
        case CONTINUE:
        case DO:
        case FALSE:
        case FOR:
        case IF:
        case NEW:
        case NULL:
        case RETURN:
        case SWITCH:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case TYPEOF:
        case FUNCTION:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case SLASH:
          ;
          break;
        default:
          break label_25;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Expression();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
  }

  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    if (jj_2_14(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case CONST:
        Type();
        break;
      default:
        ;
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(14);
      Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case CONST:
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case INCR:
      case DECR:
      case SLASH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
        case CONST:
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case FUNCTION:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case INCR:
        case DECR:
        case SLASH:
          ForInit();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case VOID:
        case TYPEOF:
        case FUNCTION:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case SLASH:
          Expression();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case FUNCTION:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case INCR:
        case DECR:
        case SLASH:
          ForUpdate();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    Statement();
  }

  final public void ForInit() throws ParseException {
    if (jj_2_15(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case INCR:
      case DECR:
      case SLASH:
        StatementExpressionList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_26;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    if (jj_2_16(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    if (jj_2_17(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case VOID:
    case TYPEOF:
    case FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
      Expression();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      ;
    }
  }

  final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      ;
    }
  }

//void SynchronizedStatement():
//{}
//{
//  "synchronized" "(" Expression() ")" Block()
//}
  final public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
    Block();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_27;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      Block();
      break;
    default:
      ;
    }
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    jj_consume_token(RUNSIGNEDSHIFT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    jj_consume_token(RSIGNEDSHIFT);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_8() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_29()) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(TYPEOF)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavascriptParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public JavascriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavascriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavascriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public JavascriptParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavascriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public JavascriptParser(JavascriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavascriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
